{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "2e69e920-3bbb-4075-aafe-9f3744d64887": {
        "id": "2e69e920-3bbb-4075-aafe-9f3744d64887",
        "parent": null,
        "name": "Alexa_Mqtt_Test",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "69af73fd-2492-4b23-b072-559aa5cf0737"
        ],
        "isRemovable": false,
        "filePath": "Alexa_Mqtt_Test"
      },
      "69af73fd-2492-4b23-b072-559aa5cf0737": {
        "id": "69af73fd-2492-4b23-b072-559aa5cf0737",
        "parent": "2e69e920-3bbb-4075-aafe-9f3744d64887",
        "name": "lambda.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "Alexa_Mqtt_Test/lambda.js",
        "code": "var mqtt = require('mqtt')\n\n// /*\n// \t* MQTT-WebClient example for Web-IO 4.0\n// */\n// var hostname = \"mqtt://test.mosquitto.org\";\n// var myport = 8883;\n// var myusername = \"myuser\";\n// var mypassword = \"mypassword\";\n// var subscription = \"mywebio/+/status\";\n\n// ###### ADAFRUIT CONNECTION #######\nvar hostname = \"mqtts://io.adafruit.com\";\nvar myport = 8883;\nvar clientId = \"clientId\";\nclientId += new Date().getUTCMilliseconds();;\nvar myusername = \"smoccia\";\nvar mypassword = \"ac7b6bfdab824cfab74b9140e6a85cda\";\n\n//var hostname      = \"mqtts://\"+myusername+\":\"+mypassword+\"@io.adafruit.com\"\n\nvar client  = mqtt.connect(hostname, \n    {\n        port: myport,\n        username: myusername,\n        password: mypassword\n    }\n);\n\n\nvar my_topic_name = 'smoccia/feeds/demofeed';\n\n\nclient.on('connect', () => {\n  client.subscribe(my_topic_name)\n});\n\nclient.on('error', (error) => {\n  console.log('MQTT Client Errored');\n  console.log(error);\n});\n\nclient.on('message', function (topic, message) {\n  // Do some sort of thing here.\n  // Could be GPIO related, or in my case running system commands to\n  // trigger the omxplayer app to play a certain file.\n\n  console.log(message.toString()); // for demo purposes.\n});\n\n// /*\n// \t* MQTT-WebClient example for Web-IO 4.0\n// */\n// //var hostname = \"io.adafruit.com\";\n// //var port = 8883;\n// //var clientId = \"clientId\";\n// //clientId += new Date().getUTCMilliseconds();;\n// //var myusername = \"smoccia\";\n// //var mypassword = \"ac7b6bfdab824cfab74b9140e6a85cda\";\n// //var subscription = \"smoccia/f/status\";\n\n// /*Initiates a connection to the MQTT broker*/\n// function Connect(){\n// \tmqttClient.connect({\n// \tonSuccess: Connected,\n// \tonFailure: ConnectionFailed,\n// \tkeepAliveInterval: 10,\n// \tuserName: myusername,\n// \tuseSSL: true,\n// \tpassword: mypassword});\n// }\n\n// client.on('connect', function () {\n//   client.subscribe('presence', function (err) {\n//     if (!err) {\n//       client.publish('presence', 'Hello mqtt')\n//     }\n//   })\n// })\n\n// client.on('message', function (topic, message) {\n//   // message is Buffer\n//   console.log(message.toString())\n//   client.end()\n// })\n\n\n// mqttClient = mqtt.connect(hostname);\n// //     { \n// //         host: hostname, \n// //         //port: myport,\n// //         //username: myusername,\n// //         //password: mypassword\n// //     }\n// // );\n\n// mqttClient.onMessageArrived = MessageArrived;\n// mqttClient.onConnectionLost = ConnectionLost;\n//Connect();\n\n// /*\n// \t* MQTT-WebClient example for Web-IO 4.0\n// */\n// //var hostname = \"io.adafruit.com\";\n// //var port = 8883;\n// //var clientId = \"clientId\";\n// //clientId += new Date().getUTCMilliseconds();;\n// //var myusername = \"smoccia\";\n// //var mypassword = \"ac7b6bfdab824cfab74b9140e6a85cda\";\n// //var subscription = \"smoccia/f/status\";\n\n// /*Initiates a connection to the MQTT broker*/\n// function Connect(){\n// \tmqttClient.connect({\n// \tonSuccess: Connected,\n// \tonFailure: ConnectionFailed,\n// \tkeepAliveInterval: 10,\n// \tuserName: myusername,\n// \tuseSSL: true,\n// \tpassword: mypassword});\n// }\n\n// /*Initiates a connection to the MQTT broker*/\n// /*function Connect(){\n// \tmqttClient.connect({\n// \tonSuccess: Connected,\n// \tonFailure: ConnectionFailed,\n// \t//keepAliveInterval: 0,\n// \tuserName: username,\n// \tuseSSL: true,\n// \tpassword: password});\n// }*/\n\n// /*Callback for successful MQTT connection */\n// function Connected() {\n// \tconsole.log(\"Connected\");\n// \tmqttClient.subscribe(subscription);\n// }\n\n// /*Callback for failed connection*/\n// function ConnectionFailed(res) {\n// \tconsole.log(\"Connect failed:\" + res.errorMessage);\n// }\n\n// /*Callback for lost connection*/\n// function ConnectionLost(res) {\n// \tif (res.errorCode !== 0) {\n// \t\tconsole.log(\"Connection lost:\" + res.errorMessage);\n// \t\tConnect();\n// \t}\n// }\n\n// /*Callback for incoming message processing */\n// function MessageArrived(message) {\n// \tconsole.log(message.destinationName +\" : \" + message.payloadString);\n// \tswitch(message.payloadString){\n// \t\tcase \"ON\":\n// \t\t\tdisplayClass = \"on\";\n// \t\t\tbreak;\n// \t\tcase \"OFF\":\n// \t\t\tdisplayClass = \"off\";\n// \t\t\tbreak;\n// \t\tdefault:\n// \t\t\tdisplayClass = \"unknown\";\n// \t}\n// \tvar topic = message.destinationName.split(\"/\");\n// \tif (topic.length == 3){\n// \t\tvar ioname = topic[1];\n// \t\tUpdateElement(ioname, displayClass);\n// \t}\n// }\n\n\n\n\n\n\n\n\nexports.handler = function(event, context, callback) {\n    \n    callback(null, {\"message\": \"Successfully executed\"});\n}",
        "triggers": [],
        "config": {
          "runtime": "nodejs8.10",
          "timeout": 60,
          "memory": 128
        },
        "testCases": {
          "023ff606-b8d9-471d-a5af-df3a5887451f": {
            "id": "023ff606-b8d9-471d-a5af-df3a5887451f",
            "name": "Unnamed event",
            "functionId": "69af73fd-2492-4b23-b072-559aa5cf0737",
            "event": "{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"
          }
        }
      }
    },
    "deletedFiles": [],
    "rootNode": "2e69e920-3bbb-4075-aafe-9f3744d64887",
    "openFiles": [
      "69af73fd-2492-4b23-b072-559aa5cf0737"
    ],
    "currentFileId": "69af73fd-2492-4b23-b072-559aa5cf0737",
    "resources": {},
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      }
    ],
    "packageJSON": {
      "dependencies": {
        "mqtt": {
          "name": "mqtt",
          "version": "2.18.8"
        }
      }
    },
    "lambdaId": "69af73fd-2492-4b23-b072-559aa5cf0737"
  },
  "PROJECT_META": {
    "projectName": "Alexa_Mqtt_Test",
    "projectDescription": "Testing MQTT Features",
    "projectVersion": "1.0.0",
    "projectRegion": "eu-west-1",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1549303924412
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "Alexa_Mqtt_Test",
      "url": "https://github.com/stefanomoccia/Alexa_Mqtt_Test"
    }
  }
}